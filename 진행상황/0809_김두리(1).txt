스프링의 핵심
-자바기반의 프레임워크,객체지향언어가 가진 강력한 특징을 살려내는 프레임워크,좋은 객체 지향 앱을 개발할 수 있게 도와주는 프레임워크

객체지향
자바 언어의 다형성을 활용
역할 = 인터페이스
구현 = 인터페이스를 구현한 클래스, 구현 객체
객체를 설계할 때 역할과 구현을 명확히 분리
객체 설계시 역할(인터페이스)을 먼저 부여하고, 그 역할을 수행하는 구현 객체 만들기

인터페이스를 안정적으로 잘 설계하는 것이 제일 중요

SOLID
클린코드로 유명한 로버트 마틴이 좋은 객체 지향 설계의 5가지 원칙을 정리
SRP: 단일 책임 원칙(single responsibility principle) - 변경이 있을 때 파급 효과가 적으면 단일 책임 원칙을 잘 따른 것
(중요)OCP: 개방-폐쇄 원칙 (Open/closed principle) - 소프트웨어 요소는 확장에는 열려 있으나 변경에는 닫혀 있어야 한다
LSP: 리스코프 치환 원칙 (Liskov substitution principle) - 프로그램의 객체는 프로그램의 정확성을 깨뜨리지 않으면서 하위 타입의 인스턴스로 바꿀 수 있어야 한다
ISP: 인터페이스 분리 원칙 (Interface segregation principle) - 특정 클라이언트를 위한 인터페이스 여러 개가 범용 인터페이스 하나보다 낫다
DIP: 의존관계 역전 원칙 (Dependency inversion principle) - 구현 클래스에 의존하지 말고, 인터페이스에 의존하라는 뜻

정리
-객체 지향의 핵심은 다형성
-다형성 만으로는 쉽게 부품을 갈아 끼우듯이 개발할 수 없다.
-다형성 만으로는 구현 객체를 변경할 때 클라이언트 코드도 함께 변경된다. 
-다형성 만으로는 OCP, DIP를 지킬 수 없다.
-뭔가 더 필요하다.
-모든 설계에 역할과 구현을 분리하자.
-이상적으로는 모든 설계에 인터페이스를 부여하자
(하지만 인터페이스를 도입하면 추상화라는 비용이 발생한다.기능을 확장할 가능성이 없다면, 구체 클래스를 직접 사용하고, 향후 꼭 필요할 때 리팩터 링해서 인터페이스를 도입하는 것도 방법이다.)

스프링은 다음 기술로 다형성 + OCP, DIP를 가능하게 지원 - DI(Dependency Injection): 의존관계, 의존성 주입,DI 컨테이너 제공
클라이언트 코드의 변경 없이 기능 확장 - 쉽게 부품을 교체하듯이 개발