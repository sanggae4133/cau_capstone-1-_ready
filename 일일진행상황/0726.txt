초기 실습 세팅 과정 
이클립스에서 진행하려다가 뭔가에 막혀서 강의에서 사용하는 intellij 를 따라서 사용함
JDK 구버전 (1.8 or 11) 로 변경, 강의에서는 1.8버전으로 진행하라고 권장 ( 1.8인 경우 이클립스 실행 안되는 버전이라 타 블로그의 글을 보고 11로 진행하였는데 문제없었다)
프로젝트 경로에서 메이븐 빌드해줌
ex) C:\Users\skaja\IdeaProjects\spring-petclinic>mvnw package  
main 폴더안에 들어있는 PetClinicApplication의 main run하여 정상 작동확인하였음


IOC Container
AOP
추상화 계층(MVC, JDBC, Resource, O/X M, O/J M 등등)


일반적인 경우

class OwnerController{
	private OwnerRepository repo = new OwnerRepository();
}

=> OwnerController 는 OwnerRepository 이 있어야 작동 

=> Inversion of Control (IOC)

class OwnerController{
	private OwnerRepository repo 
	
	public OwnerController(OwnerRepository repo){
	this.repo = repo;
	}
	
	//repo 사용한다
}

class OwnerControllerTest{
	@Test
	public void create(){
		OwnerRepository repo = new OwnerRepository();
		OwnerController controller = new OwnerController(repo);
	}
} 


IOC Container는 IOC 개념이 함유된 OwnerController 같은코드가 동작하게 해주는 역할	
Owner Controller가 IOC Container 내부에 객체로 들어오고
IOC Container 내부에서 OwnerController 객체를 만들어준다
OwnerRepository 객체도 만들어줌
빈(컨테이너 내부에 만든 객체)들의 의존성을 관리해준다 ( 빈만, intellij 기준 class 왼쪽에 초록색 콩 아이콘 있으면 빈)
빈은 보통 @Controller, @Repository, @Component, @Service 같은 주석이 달려있으면 빈으로 취급


